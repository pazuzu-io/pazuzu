package features

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAPIResolvedFeaturesParams creates a new GetAPIResolvedFeaturesParams object
// with the default values initialized.
func NewGetAPIResolvedFeaturesParams() *GetAPIResolvedFeaturesParams {
	var ()
	return &GetAPIResolvedFeaturesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAPIResolvedFeaturesParamsWithTimeout creates a new GetAPIResolvedFeaturesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAPIResolvedFeaturesParamsWithTimeout(timeout time.Duration) *GetAPIResolvedFeaturesParams {
	var ()
	return &GetAPIResolvedFeaturesParams{

		timeout: timeout,
	}
}

// NewGetAPIResolvedFeaturesParamsWithContext creates a new GetAPIResolvedFeaturesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAPIResolvedFeaturesParamsWithContext(ctx context.Context) *GetAPIResolvedFeaturesParams {
	var ()
	return &GetAPIResolvedFeaturesParams{

		Context: ctx,
	}
}

/*GetAPIResolvedFeaturesParams contains all the parameters to send to the API endpoint
for the get API resolved features operation typically these are written to a http.Request
*/
type GetAPIResolvedFeaturesParams struct {

	/*Names
	  feature names.

	*/
	Names []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get API resolved features params
func (o *GetAPIResolvedFeaturesParams) WithTimeout(timeout time.Duration) *GetAPIResolvedFeaturesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get API resolved features params
func (o *GetAPIResolvedFeaturesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get API resolved features params
func (o *GetAPIResolvedFeaturesParams) WithContext(ctx context.Context) *GetAPIResolvedFeaturesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get API resolved features params
func (o *GetAPIResolvedFeaturesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithNames adds the names to the get API resolved features params
func (o *GetAPIResolvedFeaturesParams) WithNames(names []string) *GetAPIResolvedFeaturesParams {
	o.SetNames(names)
	return o
}

// SetNames adds the names to the get API resolved features params
func (o *GetAPIResolvedFeaturesParams) SetNames(names []string) {
	o.Names = names
}

// WriteToRequest writes these params to a swagger request
func (o *GetAPIResolvedFeaturesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	valuesNames := o.Names

	joinedNames := swag.JoinByFormat(valuesNames, "")
	// query array param names
	if err := r.SetQueryParam("names", joinedNames...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

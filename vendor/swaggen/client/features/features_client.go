package features

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new features API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for features API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteAPIFeaturesName deletes feature

Delete this feature. If another features has links to this feature
nothing will be deleted and error will be returned.

*/
func (a *Client) DeleteAPIFeaturesName(params *DeleteAPIFeaturesNameParams) (*DeleteAPIFeaturesNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIFeaturesNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPIFeaturesName",
		Method:             "DELETE",
		PathPattern:        "/api/features/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPIFeaturesNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAPIFeaturesNameNoContent), nil

}

/*
GetAPIFeatures gets all features

Returns all the features without its dependencies.

*/
func (a *Client) GetAPIFeatures(params *GetAPIFeaturesParams) (*GetAPIFeaturesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIFeaturesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIFeatures",
		Method:             "GET",
		PathPattern:        "/api/features",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIFeaturesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIFeaturesOK), nil

}

/*
GetAPIFeaturesName gets single feature

Returns all the feature data without its dependencies.

*/
func (a *Client) GetAPIFeaturesName(params *GetAPIFeaturesNameParams) (*GetAPIFeaturesNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIFeaturesNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIFeaturesName",
		Method:             "GET",
		PathPattern:        "/api/features/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIFeaturesNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIFeaturesNameOK), nil

}

/*
GetAPIResolvedFeatures resolves all features by name

Returns all the features with all its dependencies in a single array.

*/
func (a *Client) GetAPIResolvedFeatures(params *GetAPIResolvedFeaturesParams) (*GetAPIResolvedFeaturesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIResolvedFeaturesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIResolvedFeatures",
		Method:             "GET",
		PathPattern:        "/api/resolved-features",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIResolvedFeaturesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIResolvedFeaturesOK), nil

}

/*
PostAPIFeatures creates a new feature

Creates a new feature with specified name, docker data, etc. Feature
name is checked to be unique.

*/
func (a *Client) PostAPIFeatures(params *PostAPIFeaturesParams) (*PostAPIFeaturesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIFeaturesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIFeatures",
		Method:             "POST",
		PathPattern:        "/api/features",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIFeaturesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAPIFeaturesCreated), nil

}

/*
PutAPIFeaturesName replaces this feature s content

Replaces snippet, test_snippet and meta data for this feature.

*/
func (a *Client) PutAPIFeaturesName(params *PutAPIFeaturesNameParams) (*PutAPIFeaturesNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIFeaturesNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAPIFeaturesName",
		Method:             "PUT",
		PathPattern:        "/api/features/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutAPIFeaturesNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAPIFeaturesNameOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
